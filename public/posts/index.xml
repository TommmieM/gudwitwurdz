<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Gud wit Wurdz - Tommie Matherne</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Gud wit Wurdz - Tommie Matherne</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2023, Tommie Matherne</copyright>
    <lastBuildDate>Fri, 19 May 2023 18:02:59 -0600</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Side Track Building a Research Database</title>
      <link>/posts/side-track-building-a-research-database/</link>
      <pubDate>Fri, 19 May 2023 18:02:59 -0600</pubDate>
      
      <guid>/posts/side-track-building-a-research-database/</guid>
      <description>Bit of a Side Track Today we are going to focus on something a bit different. A real-world level project. Something that you can copy and work with, and even take beyond what we build here to actually start creating your own resume out in order to get hired and make some money! The best part is, this is actually a rather simple project. It&amp;rsquo;s what you decide to do with it afterwards that will make all the difference in your future.</description>
      <content>&lt;h2 id=&#34;bit-of-a-side-track&#34;&gt;Bit of a Side Track&lt;/h2&gt;
&lt;p&gt;Today we are going to focus on something a bit different. A real-world level project. Something that you can copy and work with, and even take beyond what we build here to actually start creating your own resume out in order to get hired and make some money! The best part is, this is actually a rather simple project. It&amp;rsquo;s what you decide to do with it afterwards that will make all the difference in your future.&lt;/p&gt;
&lt;p&gt;The building blocks of this project are Python, of course, the Pandas data library, the sqlite3 built-in module for Python. Outside of our actual program, we will need access to the St. Louis Federal Reserve&amp;rsquo;s FRASER REST API. After everything is built, we will draw value out of it using a database viewer.&lt;/p&gt;
&lt;p&gt;For today, we are going to focus on what FRASER is, what it can be used for, what an API is, and why building a database out of the information you can gather using this API is actually something that would apply in the real-world.&lt;/p&gt;
&lt;h2 id=&#34;st-louis-federal-reserve-and-fraser&#34;&gt;St. Louis Federal Reserve and FRASER&lt;/h2&gt;
&lt;p&gt;Properly named the Federal Reserve Bank of St. Louis, the &lt;a href=&#34;https://www.stlouisfed.org&#34;&gt;St. Louis Federal Reserve&lt;/a&gt; is part of the United States Federal Reserve bank system. While the main decisions are made in New York and Washington, D.C., there are several districts across the country with branches of the Federal Reserve posted in order to take the issues distinct to each district into consideration in reports back to the central hubs. All of this is much better described and shown on the &lt;a href=&#34;https://www.stlouisfed.org/about-us&#34;&gt;&amp;lsquo;About Us&amp;rsquo;&lt;/a&gt; page for the St. Louis Fed itself.&lt;/p&gt;
&lt;p&gt;A thorough reading of that page shows an interesting bullet point under the &amp;lsquo;Our Purpose&amp;rsquo; heading:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Advancing economic knowledge, community development, and fair access to credit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Part of the way that they advance economic knowledge is through the &lt;a href=&#34;https://fraser.stlouisfed.org&#34;&gt;FRASER program&lt;/a&gt;. Through the FRASER site, you can browse around and find current and historical articles and information about the economic history of the United States from 1784 to today. In addition, you can find cirriculum information and lessons aimed at teaching economics from basics to advanced for audiences from pre-school to collegiate levels.&lt;/p&gt;
&lt;p&gt;Every bit of this data is accessible from their FRASER REST API, which can be cound in the top menu under the &amp;lsquo;About&amp;rsquo; section, or through &lt;a href=&#34;https://www.stlouisfed.org/about-us&#34;&gt;this link&lt;/a&gt;. Let&amp;rsquo;s take a quick tour of what we can get from this API.&lt;/p&gt;
&lt;h2 id=&#34;the-grand-tour&#34;&gt;The Grand Tour&lt;/h2&gt;
&lt;p&gt;I hope you&amp;rsquo;ll pardon the subtle reference in titling this section. Listening to George Jones right now.&lt;/p&gt;
&lt;p&gt;So what is included in the API? Each of the headings includes information on what you need, and how to use the resource to gather that information. After a short overview on what the purpose of the API is, there are immediately instructions on how to request an API key. An API key is used as data passed in your program&amp;rsquo;s calls to the API to let the FRASER website know that you are a legitimate user requesting this information. At a simple level, it can be thought of as a simple way to log into the site for access to information when a program is visiting the site rather than a user.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;curl&lt;/code&gt; command that is given can be typed into a bash or PowerShell prompt, replacing the email address with your own, of course. If the command is successful, you will see &lt;code&gt;{&amp;quot;message&amp;quot;:&amp;quot;API key created and sent via email.&amp;quot;}&lt;/code&gt; at your command line, and you will have an email from the St. Louis Fed FRASER project in your inbox that contains your API key. Remember, this is a necessary part of making any call to the API, so don&amp;rsquo;t lose it!&lt;/p&gt;
&lt;p&gt;The second bit of information tells you a bit on how to use the key to interact with FRASER. This can be ignored for now, with Python, we aill be using a different method to create a header. Below that, though, do note that there is a limit on the amount of information you can call for within a given time. You are limited to 30 requests per minute to the site. This may seem like a lot, being one request every two seconds on average, but we are doing this with Python. It is easier than you may think to blow through that limit. Because of that, we will actually be making sure we don&amp;rsquo;t by adding in a two second pause in our work. Sometimes, to act reliably, you have to slow down your program!&lt;/p&gt;
&lt;p&gt;The table in the next section gives you a short description of the different record types you can request, and what is included within them. Below that, you will come across an interface where you can input your API key. This is because you can effectively use this page to run requests to the server provided and see what the responses will look like. We aren&amp;rsquo;t going to actually program anything today, so I encourage you to try this out and see what kind of data you will be working with in order to create a personal database.&lt;/p&gt;
&lt;p&gt;One last thing to keep in mind, is that there are several API requests you can make that include items in curly brackets, such as &lt;code&gt;{itemId}&lt;/code&gt; or {titleID}. To actually make these calls, you need to provide a title or item to be searched. At this time, you can take wild guesses on these identifiers, but there isn&amp;rsquo;t really a way to know what identifier will return what information. This is the reason to create the database. We are going to use a lot of calls up front in order to build a repository containing a searchable record on hand of all of this information so that when you want to do actual research, you can simply refer to your own database to find out what identifier you need, make a few calls, and return the maximum information!&lt;/p&gt;
&lt;h2 id=&#34;what-to-include&#34;&gt;What to include?&lt;/h2&gt;
&lt;p&gt;So there is obviously a lot of information here. Storing it all would take more memory than our computer can possibly hold. I mean, we are talking about historical records about the United States of America&amp;rsquo;s economic environment almost since its inception! We can&amp;rsquo;t really do that.&lt;/p&gt;
&lt;p&gt;What we can do, though, is make it a lot easier to find out how to call for that information when we need it! For that reason, rather than keep large items, we keep the things that allow us to call for those large items. These are easily realized by simply looking for any API call that doesn&amp;rsquo;t require an identifier. There are only four:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All author records&lt;/li&gt;
&lt;li&gt;All subject records&lt;/li&gt;
&lt;li&gt;All theme records&lt;/li&gt;
&lt;li&gt;All timeline records&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don&amp;rsquo;t be fooled, though! This is still a &lt;em&gt;LOT&lt;/em&gt; of data! I haven&amp;rsquo;t personally created this database myself yet, I&amp;rsquo;m going to do that along with you next post. However, I am confident that the resulting database will be on the order of a few gigabytes of information, so please ensure you have the space available to store this.&lt;/p&gt;
&lt;h2 id=&#34;next-time&#34;&gt;Next time&amp;hellip;&lt;/h2&gt;
&lt;p&gt;In our next post, we will move into actually creating the Python scripts that we will combine into a program that will request all of this information and store it in a brand new databse for our easy access. In the meantime, as mentioned, acquire your API key, come back to the API documentation page, and make a few requests to see what REST data looks like.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Lesson 4 - First Steps - The Curse of Choice</title>
      <link>/posts/lesson-4-first-steps/</link>
      <pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/lesson-4-first-steps/</guid>
      <description>How To Decide Where To Start In our last meeting, we discussed what would go into making a digital version of an RPG game book and what Python concepts need to be learned in order to create it. Hopefully, I also made it apparent that this is a skeleton, not the entire plan. Things will come up, you will never create a 100% plan at the outset. So don&amp;rsquo;t try to do so.</description>
      <content>&lt;h2 id=&#34;how-to-decide-where-to-start&#34;&gt;How To Decide Where To Start&lt;/h2&gt;
&lt;p&gt;In our last meeting, we discussed what would go into making a digital version of an RPG game book and what Python concepts need to be learned in order to create it. Hopefully, I also made it apparent that this is a skeleton, not the entire plan. Things will come up, you will never create a 100% plan at the outset. So don&amp;rsquo;t try to do so. Make a basic outline of what you plan to put together, and how it will look and work, and then work forward from there.&lt;/p&gt;
&lt;p&gt;After this skeleton is completed, though, a realization usually hits most new programmers working on their first project. &amp;ldquo;Where do I start?&amp;rdquo; This is another freeze point for a lot of folks. You know the pieces are relatively simple to break down, and a rough idea on how to make them fit together, but how to begin creating to make it a project that is cohesive is difficult when just looking at the skeleton. This is when you have to decide what is your Minimal Viable Product?&lt;/p&gt;
&lt;h2 id=&#34;minimal-viable-product&#34;&gt;Minimal Viable Product&lt;/h2&gt;
&lt;p&gt;A MVP is the least work you can do that can provide at least the basics of the functionality core to the end product you want to produce. In total, what we are looking to build would be an interactive story with branches built into the story that the character can proceed through while gathering items, talents, magic, and other items to affect the branches that are open to us.&lt;/p&gt;
&lt;p&gt;At minimum, we need to be able to create a story that has branches that the user can choose without any extras. So our MVP looks a lot like a Choose Your Own Adventure. This is both why I didn&amp;rsquo;t choose a CYOA as the project, and what our first step is in the building of the final product we want to produce.&lt;/p&gt;
&lt;p&gt;All we need to accomplish this is to produce text in terminal, print our choices, accept user input, parse that to determine the choice, and call the next part of the story up depending on the choice made, and print that choice and repeat the process. To do this, we will need the following Python features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;print&lt;/code&gt; statement. A very powerful feature of Python, basic as they come, but used daily by even the most seasoned Python developer.&lt;/li&gt;
&lt;li&gt;Python &lt;code&gt;functions&lt;/code&gt; to control what gets printed to the screen next based on user input.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some other features that we are going to use, not necessarily pertinent to the completion of this project, but pertinent to being features used in a Python project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if __name__ == &amp;quot;__main__&amp;quot;:&lt;/code&gt; The entry point to Python work. This is so that your file is accessible as a standalone script as well as an importable module. Any Python work can be imported to another Python file. This allows a way of beginning execution, but is not really necessary. Python will execute scripts from top to bottom as it is not compiled, but interpreted at run time. While this is not really needed, it also serves to provide you with a way of knowing where execution begins in order to evaluate the program if you leave it and come back after a time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import&lt;/code&gt; statements. Not usually covered in beginning Python books or tutorials, imports allow you to pull in code from outside the current file and work with it. We will be doing this with our own code, but this also applies to libraries outside the Python Standard Library.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;m sure there will be more, but we will get to it as we go along.&lt;/p&gt;
&lt;h2 id=&#34;lets-code&#34;&gt;Let&amp;rsquo;s Code!&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m sure everyone has heard of &amp;ldquo;Hello World!&amp;rdquo;. The quintessential first program. Not only used to show absolute newbies that they can indeed &amp;ldquo;do this&amp;rdquo;, but frequently the first program written by veterans working with a new system because it can show you that your toolchain is properly set up simply by being able to execute.&lt;/p&gt;
&lt;p&gt;With Python, this second reason is not that important for our purposes. We can prove that our toolchain is set up simply by typing &lt;code&gt;python&lt;/code&gt; at our command line. If we get a Python input, we have all the toolchain we need.&lt;/p&gt;
&lt;p&gt;Instead, I&amp;rsquo;m going to use a slightly less well-known simple introduction for newbies. One stolen from tabletop role playing. When introducing new players to fantasy role playing, we frequently introduce the basic rules by running a player through the Cake Adventure. The adventure is the smallest complete quest possible, or at least that I&amp;rsquo;ve ever seen. The player is told of a cave nearby that is rumored to have a treasure that is guarded only by a single goblin. Upon arrival, said goblin is found, defeated, and the treasure is found to be a piece of cake. The player gets familiar with the basic rules and flow of the game, gains a few experience points, and has a tasty treat!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s adapt that for our first game. Properly structured, it gives us a story that is short, but can branch, as well as have multiple endings (no, we aren&amp;rsquo;t going to kill the player! Bad designer!)&lt;/p&gt;
&lt;p&gt;To begin, we need to create our folder structure to hold the files we are working with. Go ahead and create a new directory in your Home named &amp;ldquo;Cake&amp;rdquo; and &lt;code&gt;cd&lt;/code&gt; into it. Once there, use &lt;code&gt;touch&lt;/code&gt; to create a new file named &lt;code&gt;cake.py&lt;/code&gt;. You can use any editor of your choice to actually write this file, I&amp;rsquo;m not going to judge. Personally, I am using vim. It is not the easiest editor for new programmers, but well worth learning. I&amp;rsquo;m going to leave you to figure it&amp;rsquo;s use out if you decide to use it, a tutorial seris on vim would be overblown from our scope here. Like I said, use whatever you feel comfortable with, but eventually, learning vim is something I highly recommend if for no other reason than its ubiquity.&lt;/p&gt;
&lt;p&gt;Once you have that blank file open in your editor, let&amp;rsquo;s add some text to turn it into a Python program.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-{python}&#34; data-lang=&#34;{python}&#34;&gt;#! /bin/python3
import story

def choose():
    choice = input(&amp;quot;&amp;quot;&amp;quot;Do you want to: \n 
    1. Draw your sword and lantern and to in! \n 
    2. Go home. \n&amp;quot;&amp;quot;&amp;quot;)
    return choice

def decide(choice):
    if choice == &#39;1&#39;:
        story.proceed()
    elif choice == &#39;2&#39;:
        story.home()
    else: 
        print(&amp;quot;Sorry, I didn&#39;t understand. \n&amp;quot;)
        choice = choose()
        decide(choice)
        

if __name__ == &#39;__main__&#39;:
    print(&amp;quot;CAKE ADVENTURE!&amp;quot;)
    print(&amp;quot;&amp;quot;&amp;quot;
    You were having dinner in the town tavern when you overheard a rumor 
    of this cave containing a treasure guarded only by a single goblin. This is 
    your chance! You have been wanting to prove that you are fit for the life of  
    an adventurer, and if you can get this treasure, no one can doubt you! \n &amp;quot;&amp;quot;&amp;quot;)

    choice = choose()
    print(choice)
    decide(choice)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Save and exit, and once back to your command line inside your Cake folder where this resides, you can ALMOST run it. If you type in &lt;code&gt;python&lt;/code&gt;, you will get an error that says something along the lines of &amp;ldquo;failed import, module story does not exist&amp;rdquo;. We are going to ignore that for now because we are not done yet. But we will go line by line here and figure out what we have written.&lt;/p&gt;
&lt;p&gt;The first line is &lt;code&gt;#! /bin/python3&lt;/code&gt;. This is known as a &amp;ldquo;shebang line&amp;rdquo;. On non-Windows systems, this tells the operating system where to find the way to run this program if file permissions say it can be executed. On Windows systems, it just acts like a comment line and has no effect.&lt;/p&gt;
&lt;p&gt;Next we &lt;code&gt;import story&lt;/code&gt;. This looks first in our operating folder, in our case Cake, for a file named &amp;lsquo;story.py&amp;rsquo; and makes that part of the current program. Anything in that file will be recognized as valid code in this program. Since we haven&amp;rsquo;t yet made that file, this import will cause an error as mentioned above. We will get to that momentarily.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;def choose():&lt;/code&gt; creates a new local function named &amp;lsquo;choose&amp;rsquo;. The &lt;code&gt;def&lt;/code&gt; keyword in Python says we are defining something outside of the Python Standard Library that we want to be able to call and reuse over and over if need be. This isn&amp;rsquo;t going to be our only &amp;lsquo;choose()&amp;rsquo; function, as we will need different choices each time. I put it here to show you how to define a function, what it looks like, and what it does.&lt;/p&gt;
&lt;p&gt;Then we define another function, &lt;code&gt;decide(choice)&lt;/code&gt;. This one is a bit different. It has something in the parentheses. Why? Because we are declaring that we want to have information before calling this function. We store it in a variable that the function will know as &lt;code&gt;choice&lt;/code&gt;. Inside the function, we can write code that references this variable, and not have to declare it or assign it a value. That value comes from the part of code that calls it.&lt;/p&gt;
&lt;p&gt;Inside this function, we immediately see another new item, the &lt;code&gt;if&lt;/code&gt; statement. This makes a yes or no decision in Python. The bit between &lt;code&gt;if&lt;/code&gt; and the colon is known as a &amp;ldquo;conditional statement&amp;rdquo;, or a &amp;ldquo;Boolean statement&amp;rdquo;. This will take two things, in this case a variable, &lt;code&gt;choice&lt;/code&gt;, and a string &lt;code&gt;&#39;1&#39;&lt;/code&gt; (make sure this is a string, the &lt;code&gt;input()&lt;/code&gt; function returns a string, and you cannot compare strings to numbers in Python. Well, you can, but it isn&amp;rsquo;t what we want.) This then evaluates to one of two values, the Boolean values of &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. If &lt;code&gt;True&lt;/code&gt;, the code indented below the &lt;code&gt;if&lt;/code&gt; is executed, if &lt;code&gt;False&lt;/code&gt;, that code is skipped.&lt;/p&gt;
&lt;p&gt;IMPORTANT NOTE: You may have noticed a difference between areas of the code that have &lt;code&gt;=&lt;/code&gt;, and the conditional statements having &lt;code&gt;==&lt;/code&gt;. There is a powerful difference between these two. When Python sees a single &lt;code&gt;=&lt;/code&gt;, it is expecting to assign a value to a variable, will look to the right of that equals sign first, evaluate anything there until there is only one value, and then assign that value to the variable name located to the left of the &lt;code&gt;=&lt;/code&gt;. BUT, if Python sees &lt;code&gt;==&lt;/code&gt;, this is known as the equality operator, and Python will take the left side first, store its value, look at the left side, store its value, and then compare the values to see if they are identical. If they are, Python returns a &lt;code&gt;True&lt;/code&gt; value, and if they are not, Python returns a &lt;code&gt;False&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;But what if you want to make a choice to do different things if something else if &lt;code&gt;True&lt;/code&gt; about the code? Enter &lt;code&gt;elif&lt;/code&gt;! While this may sound like a fantasy creature with a speech impediment, it actually stands for &lt;code&gt;else if&lt;/code&gt;, and allows you another choice. In this case, the conditional statement &lt;code&gt;choice == &#39;2&#39;&lt;/code&gt;. Then it treats the indented code beneath exactly as a normal &lt;code&gt;if&lt;/code&gt;. There is also no limit to the number of &lt;code&gt;elif&lt;/code&gt; clauses you can include beneath an &lt;code&gt;if&lt;/code&gt;, so if you write a story that reaches a point with three or more branches are possible, you can check for each branch with &lt;code&gt;elif&lt;/code&gt; under &lt;code&gt;elif&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Notice below these, there is an &lt;code&gt;else&lt;/code&gt; sitting there with no conditional statement. The &lt;code&gt;else&lt;/code&gt; is a catch-all. It covers your bacon if you have something that you want to do if none of the expected conditions covered in your &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;elif&lt;/code&gt; clauses were ccaught. It allows you to do something in that case. So what do our clauses do? Let&amp;rsquo;s cover those one by one&amp;hellip;&lt;/p&gt;
&lt;p&gt;With our &lt;code&gt;if&lt;/code&gt;, when a player chooses to enter the cavern, it goes to our &lt;code&gt;import&lt;/code&gt;ed file, &lt;code&gt;story.py&lt;/code&gt; (which we haven&amp;rsquo;t created, yet), and looks for a function named &lt;code&gt;proceed()&lt;/code&gt; to be executed. Our &lt;code&gt;elif&lt;/code&gt;, similarly, looks to &lt;code&gt;story.py&lt;/code&gt; for a function named &lt;code&gt;home()&lt;/code&gt; and executes it.&lt;/p&gt;
&lt;p&gt;But what if the player enters something we don&amp;rsquo;t cover with a function? under the &lt;code&gt;else:&lt;/code&gt; you can see that we apologize (treat your readers/players with respect), then go back to the &lt;code&gt;choice()&lt;/code&gt; function. Then we do something really freaking strange. We&amp;hellip; call&amp;hellip; the function we are in, &lt;code&gt;decide(choice)&lt;/code&gt;&amp;hellip; from inside &lt;code&gt;decide(choice)&lt;/code&gt;? Is that allowed?&lt;/p&gt;
&lt;p&gt;It totally is! In fact, this is an important programming concept called &amp;ldquo;recursion&amp;rdquo;. Calling a function from inside itself makes it possible to perform any action with repeated steps by only calling the function once in code, but running that step as often as needed to complete the task. In our case, we have it easy, we only need &lt;code&gt;decide(choice)&lt;/code&gt; to recur until our reader/player plays ball and gives a valid answer.&lt;/p&gt;
&lt;p&gt;Notice, this is at the top of the file. I have said before that Python executes from the top of the file down. Later, when all the peices are in place and no errors return, you will notice that when you run it, this will not actually print anything to the screen. Also, you may be questioning why this is first, if Python goes from the top of the file and goes down, and I also said that &lt;code&gt;if __name__ == &#39;__main__&#39;:&lt;/code&gt; is the entry point of file execution.&lt;/p&gt;
&lt;p&gt;All of these things are true. Python is reading from the top down, and execution hasn&amp;rsquo;t strictly started yet. All of this part is just defining things for Python to keep in the background for later reference. So what are we wanting to store for later reference? our next line is a &lt;code&gt;input(&amp;quot;&amp;quot;)&lt;/code&gt; call. &lt;code&gt;input()&lt;/code&gt; is a Python function that will print whatever you put in the parentheses (known as an &amp;ldquo;argument&amp;rdquo;), print it to the screen, then give a input to the user and pause all execution of the program until the user types in something and presses enter.&lt;/p&gt;
&lt;p&gt;Some notes about the text string inside the parentheses for this particular &lt;code&gt;input&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Note the triple quotes. Python will recognize this as a multi-line string. You can break up the text by pressing enter in your text editor if you need to, and Python will still treat it as a continuous line. For long strings like a story, this is useful.&lt;/li&gt;
&lt;li&gt;The &amp;lsquo;\n&amp;rsquo; areas are what is known as &amp;ldquo;escaped characters&amp;rdquo; in Python strings. These do not print to screen as they are presented, but do something different. These in particular are &amp;ldquo;new line&amp;rdquo; characters. When you see a &amp;lsquo;\n&amp;rsquo;, Python will enter a line break in the terminal output. This keeps things looking nice for your presentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then we are storing a way for decisions to be made upon that &lt;code&gt;input()&lt;/code&gt;, if needed, &lt;code&gt;input()&lt;/code&gt; our player again, and make that decision all over. Python will keep this in mind for us, our work is done.&lt;/p&gt;
&lt;p&gt;Whew, we have finally made it to our actual program! &lt;code&gt;if __name__ == &#39;__main__&#39;:&lt;/code&gt;. This is going to be the first things our program apparently does when we run it. So what do we do with it? This is rather short:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;print()&lt;/code&gt; functions act much like &lt;code&gt;input()&lt;/code&gt; with the difference being that once it reaches the end of the string passed to it as an argument, Python just continues execution of the program. So why do two &lt;code&gt;print()&lt;/code&gt; calls rather than just one and put everything together? Honestly, you could. I just wanted to have only the name of the story-game on the first printed line, and then begin printing the story itself.&lt;/p&gt;
&lt;p&gt;After the story is presented, we have both our first variable declaration, and our first call to a function that we defined. The program, at this point will call the &lt;code&gt;choose()&lt;/code&gt; function, execute it as described, and then store that value (the input string from the user), in the variable named &lt;code&gt;choice&lt;/code&gt;. This flow of execution is important to keep in mind!&lt;/p&gt;
&lt;p&gt;When you see a variable being assigned a value in Python, the interpreter will look at what is AFTER the &lt;code&gt;=&lt;/code&gt;, or assignment operator, execute that if needed to arrive at a value. Only after that execution has completed, will the variable be stored in memory and point at the value derived.&lt;/p&gt;
&lt;p&gt;So, now that we know what is going on in this file, lets complete our program. Back in your Cake folder, create a file named, of course, &lt;code&gt;story.py&lt;/code&gt;. We know of two functions that will need to be included, &lt;code&gt;proceed()&lt;/code&gt; and &lt;code&gt;home()&lt;/code&gt;. Will there be others? Yes, there will be. In fact, this is how it looks for me. If you want to branch your story more, feel free to follow the patterns established and expand your story as much as you want.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-{python}&#34; data-lang=&#34;{python}&#34;&gt;#! /bin/python3
#! /bin/python3

def fight():
    print(&amp;quot;&amp;quot;&amp;quot;Well, this is what it came down to! What you \n
    kind of hoped for. But you didn&#39;t think it would be this... \n
    Intense! \n
    \n
    The goblin obviously doesn&#39;t have a sense of its own \n
    mortality as it comes across at you with a dinner knife. \n
    By the time it dawns on you that the only treasure it owns \n
    is the cake on the table, and that the cake means more to this \n
    creature than it really does to you, there is a dull slice \n
    from the knife under the armor flap near your wrist! \n
    \n
    It wasn&#39;t really much of a battle. A few parries to avoid \n
    any more scratches from its dulled dinner knife, and one \n
    good cut on your part puts the goblin down. You decide to \n
    try the cake anyway and see for yourself if the goblin was \n
    THAT out of its mind. You&#39;d recognize your aunt&#39;s baking \n
    anywhere. You kind of get it. No idea how the goblin got a hold \n
    of it, but there are doubtful to be any goblin bakers quite \n
    like her! \n
    \n
    You go back to town with your story, and a bit of frosting \n
    on your lip for evidence. That is how your adventuring career \n
    begins, with little fanfare, no actual treasure, but a lot \n
    of local reknown that you will continue to turn into more adventure. \n
    \n
    The end, hero!&amp;quot;&amp;quot;&amp;quot;
    )

def bargeIn():
    def choice():
        decision = input(&amp;quot;&amp;quot;&amp;quot;what do you want to do? \n
        1. FLEE! \n
        2. FIGHT! \n&amp;quot;&amp;quot;&amp;quot;)
        return decision

    def branch(decision):
        if decision == &#39;1&#39;:
            home()
        elif decision == &#39;2&#39;:
            fight()
        else:
            print(&amp;quot;Sorry, I don&#39;t understand. \n&amp;quot;)
            decsion = choice()
            branch(decision)

    print(&amp;quot;&amp;quot;&amp;quot;Throwing the detritus that passes for a goblin door \n
    you enter a small chamber. Before you on a table is a \n
    single bare candle throwing a dancing light around the \n
    room. Also on the table is a fine looking slice of cake. \n
    \n
    Opposite you from the table, sits a chair that contains \n
    an goblin that is apparently angry at having its dessert \n
    interrupted! \n
    \n
    It drops its fork, but retains the small knife it was holding \n
    and comes around the table at you with a scream!&amp;quot;&amp;quot;&amp;quot;)

    option = choice()
    branch(option)

def home():
    print(&amp;quot;&amp;quot;&amp;quot;
    You decide to head home. Honestly, you don&#39;t know \n
    what you were thinking. An adventurer? Hunters get \n
    killed by prey all the time, and deer and pigs don&#39;t \n
    hold a grudge like a goblin does! \n
    \n
    \t It takes until almost morning to get back home, but \n
    at least your bed is safe. \n
    \n
    The end, you lived.
    &amp;quot;&amp;quot;&amp;quot;)

def proceed():
    def choice():
        decision = input(&amp;quot;&amp;quot;&amp;quot;what do you want to do? \n
        1. Turn back. \n
        2. Barge in! \n&amp;quot;&amp;quot;&amp;quot;)
        return decision

    def branch(decision):
        if decision == &#39;1&#39;:
            home()
        elif decision == &#39;2&#39;:
            bargeIn()
        else:
            print(&amp;quot;Sorry, I don&#39;t understand. \n&amp;quot;)
            decsion = choice()
            branch(decision)

    print(&amp;quot;&amp;quot;&amp;quot;
        Drawing your sword and lighting your lantern, you \n
        proceed through the dark maw of the cavern entrance. \n
        \n
        It isn&#39;t much of a cavern, but it&#39;s shallowness is \n
        hidden from the entrance by a quick cut right in the \n
        passage about thirty yards in. A short way down the \n
        right hand passage, you see a makeshift door constucted \n
        of branches and twigs. Beyond it, you see the dancing light \n
        of a candle.
        &amp;quot;&amp;quot;&amp;quot;)
    decision = choice()
    branch(decision)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We aren&amp;rsquo;t going to go as much into detail in this part as the previous, as there really isn&amp;rsquo;t anything new, just different. First of all, you will likely notice that for the most part, the functions are in reverse order. That is because a function needs to be defined &lt;strong&gt;before&lt;/strong&gt; it gets called. If, for instance, you put &lt;code&gt;proceed()&lt;/code&gt; at the top, when the &lt;code&gt;branch()&lt;/code&gt; function calls on &lt;code&gt;bargeIn()&lt;/code&gt;, Python wouldn&amp;rsquo;t know what to do with that, as it hasn&amp;rsquo;t gotten to the part of the file that defines &lt;code&gt;bargeIn()&lt;/code&gt; yet.&lt;/p&gt;
&lt;p&gt;Speaking of, you may notice that the &lt;code&gt;choose()&lt;/code&gt; and &lt;code&gt;decide(choice)&lt;/code&gt; functions take on new names, change the name of the arguments, or sometimes the variables passed doesn&amp;rsquo;t match the variable name in the function definition. This is to show you that this is &lt;strong&gt;fine&lt;/strong&gt;. The names are arbitrary, and variable name consistency only has to be maintained inside of the particular block of code referencing that variable.&lt;/p&gt;
&lt;p&gt;For instance, in &lt;code&gt;bargeIn()&lt;/code&gt;, I name the function &lt;code&gt;branch(decision)&lt;/code&gt;. Inside of the function definition, I stick to referring to the variable as &lt;code&gt;decision&lt;/code&gt;. But in the actual area where we call the function to be executed, I wrote the line as &lt;code&gt;branch(option)&lt;/code&gt;. This still works. During a function call that requires an argument, you pass in a variable from the code you are working on, and you call it by whatever name it has in that part of the code. Once it actually passes control to the function itself, the variable name essentially gets changed to whatever you named it inside the function, in this case &lt;code&gt;decision&lt;/code&gt;, and the code proceeds.&lt;/p&gt;
&lt;p&gt;Additionally, you probably noticed that there are function definitions inside of function definitions! This is called nesting functions. For our purposes, it is useful because we are writing functions with the same name in this file, but the function names have to do different things in each of the outer functions that contain them. By nesting them inside the function that will call them, the inner functions effectively don&amp;rsquo;t exist for any other functions in this file!&lt;/p&gt;
&lt;p&gt;For instance, if we call &lt;code&gt;choice()&lt;/code&gt; within &lt;code&gt;bargeIn()&lt;/code&gt;, it only sees the function &lt;code&gt;choice()&lt;/code&gt; defined within itself. It cannot know that a function named &lt;code&gt;choice()&lt;/code&gt; also exists inside of &lt;code&gt;proceed()&lt;/code&gt; for example. This is called &amp;ldquo;scope&amp;rdquo;. Pay attention to the indent levels of the file! If you indent something inside a body block, for instance, after the colon in a function definition, it only exists inside that body. Once indent goes back to the level of it&amp;rsquo;s contained area or more, for instance, a new first level indent function definition, that new first level indent cannot see anything in the previous first level indent&amp;rsquo;s body block. It&amp;rsquo;s out of &amp;ldquo;scope&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So, now you know the basics of a lot of advanced Python stuff. We&amp;rsquo;ve covered importing external code, how to write that code to be called in, defining our own functions to get things done when Python doesn&amp;rsquo;t have the abilities baked in, making decisions in code with &lt;code&gt;if&lt;/code&gt; statements, inner and outer functions, scope, and even recursion, which is widely considered one of the most confusing things in all of programming!&lt;/p&gt;
&lt;p&gt;Take this knowledge, and try to make your own story using this pattern. Have fun with it, that&amp;rsquo;s what coding is all about.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Lesson 3 Project Planning 1</title>
      <link>/posts/lesson-3-project-planning-1/</link>
      <pubDate>Tue, 21 Mar 2023 17:04:50 -0600</pubDate>
      
      <guid>/posts/lesson-3-project-planning-1/</guid>
      <description>Programming like a Lone Wolf Now that we know enough about the system we find ourselves in, we can begin to make it do some interesting things if we are just brave enough to do some programming. For many, programming can seem like a daunting task. They look at the programs they use daily, with all the moving parts and cloud interactions, then they see the kind of salaries that are commanded by the folks writing such things, and feel that programming is a forum for some elite class of people.</description>
      <content>&lt;h2 id=&#34;programming-like-a-lone-wolf&#34;&gt;Programming like a Lone Wolf&lt;/h2&gt;
&lt;p&gt;Now that we know enough about the system we find ourselves in, we can begin to make it do some interesting things if we are just brave enough to do some programming. For many, programming can seem like a daunting task. They look at the programs they use daily, with all the moving parts and cloud interactions, then they see the kind of salaries that are commanded by the folks writing such things, and feel that programming is a forum for some elite class of people. This wasn&amp;rsquo;t always the way, though.&lt;/p&gt;
&lt;p&gt;Growing up in the 1980s, I can remember perusing books on the racks at my local pharmacy newsstand and seeing among them titles like &lt;em&gt;Basic Computer Games&lt;/em&gt; on the shelf. Inside were complete code listings for games. You buy the book, bring it home, and, provided your computer understood the Basic Programming Language used in the book, type in the code and you had a game to play. After that, if you were brave, you could get into the code that was just typed in, change it, and see how that made the game different.&lt;/p&gt;
&lt;p&gt;Personally, I grew up too poor for my family to own a computer during those halcyon days. I didn&amp;rsquo;t actually get into programming until well after I graduated high school some years later, and my first foray into programming was with Java. My first programs were standards like &amp;ldquo;Hello, World!&amp;rdquo;, and learning the basics with console programs that emulated a bank account and ATM. It was quite boring. I always wished that there was a way to return to those earlier times, and learn to program with making a game, even if it did run in a terminal rather than a graphical interface. My first gaming experience on a computer was &lt;em&gt;Zork&lt;/em&gt; at a friend&amp;rsquo;s house, so I knew that games could well be text based. Alas, even writing a parser game is more complicated than can be expected for a beginner.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BUT&lt;/strong&gt; there are alternatives! On those very same newsstands, I was introduced to another very classic form of 1980s gaming that didn&amp;rsquo;t involve a computer, but could keep an imaginative youth occupied for days! Game books! Most are familiar with the line of &lt;em&gt;Choose-Your-Own-Adventure&lt;/em&gt; books. Short novels that always ended up being more short stories because the story was a branching path, and there were often ten or more ways for the story to end. There also existed another offshoot that was much more involved. Book series such as &lt;em&gt;Fighting Fantasy&lt;/em&gt; and &lt;em&gt;The Lone Wolf&lt;/em&gt; books invited you to create a character, choose skills, and even fight or flee using magic, weapons, and armor that you can pick up along your journeys. These are what we are going to create as our first project.&lt;/p&gt;
&lt;h2 id=&#34;but-how-the-hell-are-we-gonna-do-it&#34;&gt;But, how the hell are we gonna do it?&lt;/h2&gt;
&lt;p&gt;This alone may seem like a daunting task. Putting words to the screen, gathering inputs from a user, creating a character, managing an inventory, keeping track of enemies, health, and a lot of other items. The first part of any project is to identify all the things that need to be done, breaking them down into their pieces, and chewing each one up until it can be spit out into a file.&lt;/p&gt;
&lt;p&gt;Unfortunately, the Basic Programming Language, which was simple enough for elementary school kids to get the hang of with a few books defining the games to be played, is no longer an option. We do, however, have a programming language that shares many traits: simple syntax rules that are easy to read, a small amount of basic information to create things with, and the ability to create a file that can run on a multitude of machines. If you haven&amp;rsquo;t been following along with the Linux portion of these tutorials so far, you can still follow along with this! Python files can run anywhere that a Python interpreter is installed, and unless you are doing rather advanced work, it will run fine. This project will &lt;strong&gt;NOT&lt;/strong&gt; include any of that advanced workings. So long as you have any system with Python installed, you can follow along. For my own sake of nostalgia for a command line, though, I hope you decide to do this with Linux.&lt;/p&gt;
&lt;p&gt;So, let&amp;rsquo;s break down what we are going to need in order to create this, and set an expectation of what it will look like, both on disk and while running, when we are done. First of all, let&amp;rsquo;s nail down exactly what we are going for. The &lt;em&gt;Choose-Your-Own-Adventure&lt;/em&gt; books were great for what they were, but I want to introduce programming to you with a project that will take you from no programming knowledge to managing multiple files, writing your own classes and functions, and managing it all easily, in one project. For that, we need those extra pieces. &lt;em&gt;Fighting Fantasy&lt;/em&gt; was a great entry, and one I wanted to go with at first, but those are still under copyrights and hard to come by easily.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The Lone Wolf&lt;/em&gt;, however, has been released into the wild under the licensing of Project Aon. I&amp;rsquo;m not going to link that as it isn&amp;rsquo;t important as I encourage you to follow the mechanics and create your own story with it. I do mention it, however, as it means you can get more familiar with the way the books worked. &lt;em&gt;The World of Lone Wolf&lt;/em&gt; as a series of game books is actually available on iPhone and Android as a free app, where you can do everything that was available in the original books, and get a feel for what we are going to create. There are also many blogs written online about the books themselves so you can see what they were like and how they were played. I encourage you to do both.&lt;/p&gt;
&lt;p&gt;Once you are familiar with what the outcome is going to be, the question becomes, how to get it done. Each of these concepts and thier management are going to be the topic of their own posts, so detail is going to be light for now. If you are so inclined, I invite you to search a bit on the concepts introduced and get familiar with them, but I warn you about going too deep into rabbit holes. Becoming more overwhelmed will not do you any good. These are deep concepts, and writing on them can get dense. Familiarity will come with more through actually accomplishing the tasks rather than reading about them. Get some understanding, but follow along for the greatest benefit.&lt;/p&gt;
&lt;p&gt;The first item on the agenda is going to be actually creating a character. This will cover gathering input from a user, randomly assigning some stats, and allowing skills that will be useful later for the character, and storing them all in a way that these numbers and abilities can later be recalled and used by our program. For this, we are going to use data structures such as the list, as well as our first foray into creating classes. Even if this is your first time programming, you may have heard of &lt;strong&gt;object-oriented programming&lt;/strong&gt; before. The class is the basic building block of how this is done.&lt;/p&gt;
&lt;p&gt;Next up, we will have to also create an inventory, again, lists pop up, but we will also be using classes for each item that can detail how it can be used, what it&amp;rsquo;s effects will be, and any changes to the world that could possibly be wrought. So a list of objects created from these classes! The effects that things can have will be accomplished through the use of functions within the classes. Functions are simply pieces of reusable code, that way we can name the function, describe it with code, and then reliably call that name whenever we want that effect to take place.&lt;/p&gt;
&lt;p&gt;Of course, this is a story, so we will have to be able to put words on the screen. At the end of each bit of text, we will have to prompt for a choice, so user input will once again rear it&amp;rsquo;s head, but this time, we will not be using the input to generate an object (character), but to decide what piece of code to call next. And with how long screens of text will be, we may as well chop up each scene of our story into it&amp;rsquo;s own file. This section will go into how to call into your code other files that you have written in order to seemlessly jump from one bit of the story to the next. We will also be breaking classes and functions into their own files so that it can be available everywhere, so this is quite a crucial piece of information.&lt;/p&gt;
&lt;p&gt;Of course, no story is complete without an antagonist or five, so we will have to be able to create enemies for the fight scenes, along with rules (functions) on how those fights are handled, and what happens when things don&amp;rsquo;t go our way.&lt;/p&gt;
&lt;p&gt;So, to wrap up, we are going to be covering data structures, classes and objects (object-oriented programming), functions, multi-file use, and user input. There may be some things I&amp;rsquo;ve even left out! That is the thing with a project, you can plan all day long, but still some things are unseeable until you are elbow deep in the code. We will deal with how to get around those problems when they arise as well. All-in-all, even if you have never worked with code a day in your life, by the end of this, you will have a working project that usually is expected of a second year undergrad in most colleges. And I promise, you can do it! This is all going to be done with basic building blocks that turn into something major, not much different from your word processor, just smaller.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Lesson 2 Directories and Files</title>
      <link>/posts/lesson-2-directories-and-files/</link>
      <pubDate>Thu, 16 Mar 2023 18:57:00 -0600</pubDate>
      
      <guid>/posts/lesson-2-directories-and-files/</guid>
      <description>Let&amp;rsquo;s Be Manipulative So now that we have an idea of what our filesystem looks like and how to traverse it, how do we change it? Let&amp;rsquo;s go over a few commands to get the basics on creating and deleting files and folders, as well as moving them around. We are also going to talk a bit about wild cards that you can include to lower the amount of typing. Well, enough talk, open your terminal and let&amp;rsquo;s get started!</description>
      <content>&lt;h2 id=&#34;lets-be-manipulative&#34;&gt;Let&amp;rsquo;s Be Manipulative&lt;/h2&gt;
&lt;p&gt;So now that we have an idea of what our filesystem looks like and how to traverse it, how do we change it? Let&amp;rsquo;s go over a few commands to get the basics on creating and deleting files and folders, as well as moving them around. We are also going to talk a bit about wild cards that you can include to lower the amount of typing. Well, enough talk, open your terminal and let&amp;rsquo;s get started!&lt;/p&gt;
&lt;h3 id=&#34;the-power-of-creation&#34;&gt;The Power of Creation&lt;/h3&gt;
&lt;p&gt;While moving around the file system, you may have noticed that your Linux system comes with quite a large set of files and folders already included. Especially if you ventured out of just your home folder. For the most part, however, most of what you will do as  a user of a system involves only what is in your home folder, and that area is pretty bare.&lt;/p&gt;
&lt;p&gt;To keep things rather tidy, you will likely want to make directories inside your directories, and files inside of those. So, let&amp;rsquo;s get that sorted now, shall we? Assuming you began from your home folder, type in &lt;code&gt;cd Documents&lt;/code&gt; to get to your Documents directory. If you run &lt;code&gt;ls&lt;/code&gt; to list the contents of this folder, it will likely not show any files or folders (unless of course, you have been studying ahead. If that&amp;rsquo;s the case, good on you!).&lt;/p&gt;
&lt;p&gt;Again, organization is always a good thing, so how about we drop a directory in here before we start creating files out of nowhere? Type in &lt;code&gt;man mkdir&lt;/code&gt; to get a look at what the &lt;code&gt;mkdir&lt;/code&gt; program does for us. The command and the options for it are pretty straightforward, and I&amp;rsquo;m not going to insult your intelligence by going over all of them. Most important information, right at the top, &amp;ldquo;Make Directories&amp;rdquo;, and it does just what it says on the tin.&lt;/p&gt;
&lt;p&gt;So type in &lt;code&gt;mkdir foo&lt;/code&gt;. You don&amp;rsquo;t have to go with the name &lt;code&gt;foo&lt;/code&gt; there, that&amp;rsquo;s just a common placeholder in tutorials. Anything after the command &lt;code&gt;mkdir&lt;/code&gt; is going to be the name of the directory that is created where you currently are. You can prove this by once again tpying &lt;code&gt;ls&lt;/code&gt;. The listing should show a folder named &lt;code&gt;foo&lt;/code&gt;, or whatever you chose to name that folder. If it doesn&amp;rsquo;t, go back in your history and look for errors, chances are you may have made a typo in the command like I did when I was following along with my own tutorial! No shame in that, just check the spelling, and try again.&lt;/p&gt;
&lt;p&gt;Going back to last lesson, if we use the &lt;code&gt;ls&lt;/code&gt; command, we can list the contents of the new folder if we pass the name of the folder to the command. Let&amp;rsquo;s try that, &lt;code&gt;ls ./foo&lt;/code&gt;. Remember, the &lt;code&gt;.&lt;/code&gt; is a shorthand for the current directory, and &lt;code&gt;foo&lt;/code&gt; can be replaced with whatever you named that folder you just created. The command should come back empty on this one, since we just created the directory and didn&amp;rsquo;t put anything in it.&lt;/p&gt;
&lt;p&gt;To do that, unless you want to dig into downloading things from the internet right away from the command line, we can use the &lt;code&gt;touch&lt;/code&gt; command. Go ahead, try reading through &lt;code&gt;man touch&lt;/code&gt; to see what that is all about. Go ahead, I&amp;rsquo;ll wait for you, and join you back in the next paragraph.&lt;/p&gt;
&lt;p&gt;So this one seems a bit more complicated, doesn&amp;rsquo;t it? It is important to know what it says there. &amp;ldquo;Change file timestamps&amp;rdquo;. For our purposes, the more important information is in the second section, second paragraph, though. &amp;ldquo;A FILE argument that does not exist is created empty&amp;hellip;&amp;rdquo; If you ever do get into a role where you have to do a forensics investigation, however, keep that first part in mind. &lt;code&gt;touch&lt;/code&gt; can change the creation and access dates that show up in the system for a file, so you cannot just believe what you see!&lt;/p&gt;
&lt;p&gt;Anyway, to the matter at hand, let&amp;rsquo;s pass it a non-existent file and get it created. Try &lt;code&gt;touch ./foo/bar&lt;/code&gt;. Again, &lt;code&gt;bar&lt;/code&gt; is just one of those placeholder words used in beginner tutorials a lot when the author has no imagination and a lot of geekiness, you can name the file whatever you would like. Now, if you type in &lt;code&gt;ls&lt;/code&gt;, you&amp;rsquo;ll see&amp;hellip; &lt;code&gt;bar&lt;/code&gt;? What? That&amp;rsquo;s the folder we created?&lt;/p&gt;
&lt;p&gt;We never changed directories to get into the folder, but gave the directory name as part of the argument for &lt;code&gt;touch&lt;/code&gt;. What are the results of &lt;code&gt;ls ./foo&lt;/code&gt;?  There is our file, safe and sound. This is another important idea to keep in mind: you can manipulate any part of the system from wherever you are in the system, so long as you know the path to get there!&lt;/p&gt;
&lt;h3 id=&#34;an-bit-of-misdirection&#34;&gt;An bit of misdirection&lt;/h3&gt;
&lt;p&gt;Two commands that we will go into detail about later are &lt;code&gt;echo&lt;/code&gt; and &lt;code&gt;cat&lt;/code&gt;. For now, though, we will use them. I won&amp;rsquo;t have you read the &lt;code&gt;man&lt;/code&gt; pages for these two just yet, but you can if you want to. Who am I to stop you? I&amp;rsquo;m just words on a screen.&lt;/p&gt;
&lt;p&gt;Right now, we have an empty file. We can change that, and prove that we have changed it with the above two commands. The &lt;code&gt;cat&lt;/code&gt; command prints the text in a file to the terminal. Right now, if we try &lt;code&gt;cat bar&lt;/code&gt;, nothing happens, because the file is empty.&lt;/p&gt;
&lt;p&gt;However, &lt;code&gt;echo&lt;/code&gt; is a much more interesting command. Try &lt;code&gt;echo &amp;quot;Hello, world!&amp;quot;&lt;/code&gt; . You should see the words &lt;code&gt;Hello, world!&lt;/code&gt; printed back before your prompt returns. The fun of echo, though, comes in some built in utilities of the command line. Namely, redirecting input.&lt;/p&gt;
&lt;p&gt;We can do this with what are called the direction operators. The first we are going to use is &lt;code&gt;&amp;gt;&lt;/code&gt;. Try &lt;code&gt;echo &amp;quot;Hello, world!&amp;quot; &amp;gt; bar&lt;/code&gt;. The command prompt should return as normal with nothing printed after the command and before the prompt. If you do &lt;code&gt;cat bar&lt;/code&gt; now, though, it should output &lt;code&gt;&amp;quot;Hello, world!&amp;quot;&lt;/code&gt;. You have just written information to the file!&lt;/p&gt;
&lt;p&gt;If you try that again, and put in &lt;code&gt;echo &amp;quot;Good-bye!&amp;quot; &amp;gt; bar&lt;/code&gt;. When you try &lt;code&gt;cat bar&lt;/code&gt;, it writes out &lt;code&gt;Good-Bye!&lt;/code&gt;. What happened to the greeting? It was overwritten. When you use the &lt;code&gt;&amp;gt;&lt;/code&gt; direction operator in the terminal, it does what is called a destructive direction to the file. Anything that was previously in the file is removed, and the new data is written.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s put our greeting back, &lt;code&gt;echo &amp;quot;Hello, world!&amp;quot; &amp;gt; bar&lt;/code&gt;. If you&amp;rsquo;d like, you can &lt;code&gt;cat bar&lt;/code&gt; to verify, it now says &lt;code&gt;Hello, World!&lt;/code&gt;. If we want to add more to the file without losing what is already there, the non-destructive operator has our back. &lt;code&gt;echo &amp;quot;Good-bye!&amp;quot; &amp;gt;&amp;gt; bar&lt;/code&gt;. Note the double &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, that is what makes it non-destructive.&lt;/p&gt;
&lt;p&gt;For now, it isn&amp;rsquo;t important, but we can actually make things flow in the other direction, as well. We have no occasion to use this now, but when we are building longer, more complicated lines, you may need to read information from a file in a part of it. At this point, the &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operators will direct that flow of data.&lt;/p&gt;
&lt;h3 id=&#34;rearranging-things&#34;&gt;Rearranging things&lt;/h3&gt;
&lt;p&gt;Right now, the file we made sits in a directory we made, inside of our Documents directory. While I mentioned earlier that organization is important, we are about to mess things up a bit. Get back out of the &lt;code&gt;foo&lt;/code&gt; directory and back into the Documents. You have all the tools needed, I&amp;rsquo;m not going to give you the code for this one.&lt;/p&gt;
&lt;p&gt;Got back there? Good! Knew you had it in you! Those shortcuts we&amp;rsquo;ve been mentioning are about to come in handy. Let&amp;rsquo;s say for a moment that you want a copy of &lt;code&gt;bar&lt;/code&gt; here in Documents. While it is a rather simple bit of text, it would get cumbersome later to recreate a file that may be a few thousand lines long. There are easier ways: copying and moving files.&lt;/p&gt;
&lt;p&gt;Copying files can get rather wild. If you read &lt;code&gt;man cp&lt;/code&gt;, the man page for the &lt;code&gt;cp&lt;/code&gt; command, you will quickly get to realizing that there are a few different ways to use the command. We are about to go through all of those ways.&lt;/p&gt;
&lt;p&gt;First, we will copy the file to a different file name within the same folder with a different name. To do this, we are going to use the following: &lt;code&gt;cp ./foo/bar ./foo/baz&lt;/code&gt;. Again, &lt;code&gt;baz&lt;/code&gt; is just a placeholder, use whatever name you like. We use the file path as the terminal is currently working in the Documents directory, so we need to point first to the &lt;code&gt;foo/&lt;/code&gt; directory before specifying our file. Likewise, if we try to &lt;code&gt;ls&lt;/code&gt; the contents of &lt;code&gt;foo/&lt;/code&gt;, you can see both the &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt; files sitting there. Further, with &lt;code&gt;cat&lt;/code&gt; and the file path you can confirm that both files contain the same data.&lt;/p&gt;
&lt;p&gt;It seems a bit silly to have two files with the same information in the same directory, so we are going to get rid of one of them. To do that, we use &lt;code&gt;rm&lt;/code&gt;. &lt;code&gt;man rm&lt;/code&gt; gives more information. This is the remove command, and it does just what it says on the tin, which is probably a phrase that is getting tiring at this point. But it is true. Let&amp;rsquo;s try &lt;code&gt;rm ./foo/baz&lt;/code&gt;, and then &lt;code&gt;ls ./foo&lt;/code&gt; one more time. Yup, it&amp;rsquo;s gone!&lt;/p&gt;
&lt;p&gt;For the sake of argument, though, go ahead and re-copy that file into existence. I promise, this will make sense soon. In fact, let&amp;rsquo;s get into how. So if you &lt;code&gt;ls foo&lt;/code&gt; now (that&amp;rsquo;s right, you don&amp;rsquo;t need the &lt;code&gt;./&lt;/code&gt;), you should see both files sitting in that folder. Now, let&amp;rsquo;s say you want those files in the Documents directory instead. We could copy them and then remove them from &lt;code&gt;foo&lt;/code&gt;, but that seems a bit overkill. There has to be an easier way, right?&lt;/p&gt;
&lt;p&gt;Enter &lt;code&gt;mv&lt;/code&gt;. If you read the &lt;code&gt;man&lt;/code&gt; page, you will see that the use and options between &lt;code&gt;mv&lt;/code&gt; and &lt;code&gt;cp&lt;/code&gt; are very similar. Other than the program name, commands written with the two will both work if you just change the program name at the beginning. For the most part. Some flag sets are different, but other than that, they are very similar. Keep that in mind as we go through this part, because we are going to do a move that could work just as well for copying files.&lt;/p&gt;
&lt;p&gt;For instance to move both files to the Documents directory, the command would be &lt;code&gt;mv ./foo/bar ./foo/baz .&lt;/code&gt;. The two file names are both provided, the final &lt;code&gt;.&lt;/code&gt; denotes the place we want the files to be moved to. So if you do &lt;code&gt;ls&lt;/code&gt; now, you can see that &lt;code&gt;foo/&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt;, and &lt;code&gt;baz&lt;/code&gt; are all here.&lt;/p&gt;
&lt;p&gt;There is one more useful thing that &lt;code&gt;mv&lt;/code&gt; can do for you as well. Try &lt;code&gt;mv baz bas&lt;/code&gt;. The file name &lt;code&gt;bas&lt;/code&gt; did not exist when you did this, but if you do &lt;code&gt;ls&lt;/code&gt; now, the contents of Documents are &lt;code&gt;foo/&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt;, and &lt;code&gt;bas&lt;/code&gt;. &lt;code&gt;baz&lt;/code&gt; no longer exists. And if you &lt;code&gt;cat bas&lt;/code&gt;, you see that the contents are the same. You can use &lt;code&gt;mv&lt;/code&gt; to rename your files. That&amp;rsquo;s enough for now, though. Shall we clean up?&lt;/p&gt;
&lt;h3 id=&#34;the-power-of-destruction&#34;&gt;The Power of Destruction&lt;/h3&gt;
&lt;p&gt;Just as we can create files and directories, we can remove them. For instance, currently, we have an empty directory. &lt;code&gt;rmdir&lt;/code&gt; will help us get rid of it. I will actually not walk you through this one! Read the &lt;code&gt;man&lt;/code&gt; page if needed, and see if you can get &lt;code&gt;foo/&lt;/code&gt; gone.&lt;/p&gt;
&lt;p&gt;Keep in mind, this will only work if the directory is empty. If there are any files in the directory, you will recieve an error. That&amp;rsquo;s Linux&amp;rsquo;s way of keeping you from stepping on your own toes and deleting files you didn&amp;rsquo;t mean to. There is a way around this, hidden in the &lt;code&gt;man&lt;/code&gt; page. I encourage you to recreate a new directory and put a file or two in it, and try to delete the directory along with it&amp;rsquo;s contents after we are done.&lt;/p&gt;
&lt;p&gt;Similarly, as we showed earlier, &lt;code&gt;rm&lt;/code&gt; can get rid of those identical files in your Documents folder, but can actually do it both at the same time! I&amp;rsquo;m sure you can figure that out as well&amp;hellip; Yes, I know, lazy of me. I&amp;rsquo;m tired, what can I say.&lt;/p&gt;
&lt;p&gt;Again, I encourage you to read those &lt;code&gt;man&lt;/code&gt; pages, play around in your Home folders, and see what you can do. Next time, we will actually take that leap mentioned earlier, and download a file from the internet, and do some manipulation of it&amp;rsquo;s contents. It promises to cover more commands, but actually take less time to read!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Lesson 1 Command Line Starters</title>
      <link>/posts/lesson-1-command-line-starters/</link>
      <pubDate>Sun, 12 Mar 2023 14:52:08 -0600</pubDate>
      
      <guid>/posts/lesson-1-command-line-starters/</guid>
      <description>Welcome to the Command Line In this first lesson, I am going to make a few assumptions. You have access to a Linux command line, and know how to open it. Other than that, this is completely for a new user. Below we will take our first steps with Linux, and like any first steps, the best way to start off is by being able to orient yourself. The commands in this lesson will give you the ability to know what directory you are in, what is there, and how to go to other areas of the filesystem.</description>
      <content>&lt;h2 id=&#34;welcome-to-the-command-line&#34;&gt;Welcome to the Command Line&lt;/h2&gt;
&lt;p&gt;In this first lesson, I am going to make a few assumptions. You have access to a Linux command line, and know how to open it. Other than that, this is completely for a new user. Below we will take our first steps with Linux, and like any first steps, the best way to start off is by being able to orient yourself. The commands in this lesson will give you the ability to know what directory you are in, what is there, and how to go to other areas of the filesystem. So let&amp;rsquo;s go!&lt;/p&gt;
&lt;h3 id=&#34;a-bit-about-the-prompt&#34;&gt;A bit about the prompt.&lt;/h3&gt;
&lt;p&gt;When you first open the terminal, you should be met with a prompt something like this &lt;code&gt;user@host:~$&lt;/code&gt;. This is the default prompt. The anatomy of it is rather simple. The first portion identifies the &lt;code&gt;user&lt;/code&gt;, this is the logged in user, hopefully, you. After the at sign, is &lt;code&gt;host&lt;/code&gt;, or the name of the workstation (computer) that you are logged into. Linux has roots from Unix, the original multiuser and multi-machine operating system. From your desk, you may sign into any number of available servers. The &lt;code&gt;host&lt;/code&gt; portion of the name is a bit of an identifier of that legacy, and gives your computer a server name. Linux, by virtue of that Unix legacy, can be used as a server. In fact, Linux servers run more of the internet than any other kind of server operating system at 38% of all websites and 49% of the top 1,000 websites currently active according to W3Techs&#39; usage comparison.&lt;/p&gt;
&lt;p&gt;That is the end of the identifier portion of the prompt. As is common in Linux, the separator is a colon (:). Everything after this is the actual prompt. The &lt;code&gt;~&lt;/code&gt; located here is actually the current location. &lt;code&gt;~&lt;/code&gt; is a shorthand in Linux as the user&amp;rsquo;s Home folder. If you come from a Windows background, think of this as your Users folder there. This is where you, as a user, keep your files. Other users have their own Home folders, which you may or may not be able to look into depending on the permissions that are set up on your account as well as the individual folders.&lt;/p&gt;
&lt;p&gt;One last note. Up to now, I have been using the Windows terms that should be more familiar to most readers. In Linux, though, they are called directories. The meaning is exactly the same: a filesystem organization tool to present an easy way to find files stored on the hard drive. From now on, I will be referring to them as directories.&lt;/p&gt;
&lt;p&gt;Next, there is the &lt;code&gt;$&lt;/code&gt; identifier. This is the active prompt. The &lt;code&gt;$&lt;/code&gt; signifies that you are using the prompt as a normal user. If you change to a root account (synonymous with superuser or administrator), the &lt;code&gt;$&lt;/code&gt; will change to a &lt;code&gt;#&lt;/code&gt; to signify that difference. After that, is the blinking cursor. Let&amp;rsquo;s put it to work, shall we?&lt;/p&gt;
&lt;h2 id=&#34;pwd---the-where-am-i-of-linux&#34;&gt;&amp;lsquo;pwd&amp;rsquo; - the Where Am I? of Linux&lt;/h2&gt;
&lt;p&gt;At any time at the prompt, if you type in &lt;code&gt;pwd&lt;/code&gt; and hit enter, you will be met with a full print out of your current location. This tells you the path from filesystem root &lt;code&gt;/&lt;/code&gt; (think of this as equivalent to &lt;code&gt;C:\&lt;/code&gt; in Windows), down the directory tree to your current directory. If you haven&amp;rsquo;t changed directories since opening the terminal, it should look similar to &lt;code&gt;/home/username&lt;/code&gt; with &amp;lsquo;username&amp;rsquo; actually being replaced by your user name. That is the folder that is signified by the &lt;code&gt;~&lt;/code&gt; in the prompt. I bring this one up first as it will provide some valuable context for the next few commands. There really is not much to be said about this command, so let&amp;rsquo;s move on, shall we.&lt;/p&gt;
&lt;h3 id=&#34;a-note-about-the-file-paths&#34;&gt;A note about the file paths&lt;/h3&gt;
&lt;p&gt;The results of the &lt;code&gt;pwd&lt;/code&gt; command was what is known as a file path. More particularly, it is an &amp;ldquo;absolute&amp;rdquo; file path. It starts at root (&lt;code&gt;/&lt;/code&gt;), and travels past each folder name, separated by further &amp;lsquo;/&amp;rsquo; characters, and ends with a final &amp;lsquo;/&amp;rsquo; to denote that this, too is a directory. There are also a second kind of file path printing known as &amp;ldquo;relative&amp;rdquo; file paths. This is the path forward from where you are currently, on through to where you want to end up. Describing this now is a bit difficult to do with clarity. We will return to this idea shortly.&lt;/p&gt;
&lt;h2 id=&#34;ls---well-what-have-we-got-here&#34;&gt;&amp;lsquo;ls&amp;rsquo; - Well what have we got here?&lt;/h2&gt;
&lt;p&gt;So, thanks to &lt;code&gt;pwd&lt;/code&gt;, we know where we are. But what is here? To overuse comparisons, this command line currently is a cave as black as the screen it is printed on. How do we shine a light on this? &lt;code&gt;ls&lt;/code&gt; is out next command to do so. Typing this command will &amp;ldquo;LiSt&amp;rdquo; the contents of the current directory, go ahead and try it out. Your output should include several items like &lt;code&gt;Desktop&lt;/code&gt;, &lt;code&gt;Documents&lt;/code&gt;, &lt;code&gt;Downloads&lt;/code&gt;, etc. These are the directories that are inside of your home directory. If you have a few that are a different color or emphasis level, those are files within this directory. Files will usually have file extensions, where directories will not. The exception to this is plain text files, which in Linux, do not require the &amp;lsquo;.txt&amp;rsquo; file extension.&lt;/p&gt;
&lt;p&gt;This is pretty interesting, but the &lt;code&gt;ls&lt;/code&gt; command actually introduces us to a few more concepts to Linux commands: flags and &lt;code&gt;man&lt;/code&gt; pages.&lt;/p&gt;
&lt;h3 id=&#34;a-note-about-flags&#34;&gt;A note about flags&lt;/h3&gt;
&lt;p&gt;When you type in a &lt;code&gt;-&lt;/code&gt; after a command, this is called a flag. Most flags are single letters, and can be preceeded with a single &lt;code&gt;-&lt;/code&gt;. There are some flags that are entire words, though. When defining those flags, use a double flag notation (&lt;code&gt;--&lt;/code&gt;). But how do you know when you can use a flag, and what those flags are?&lt;/p&gt;
&lt;h3 id=&#34;a-note-about-man-pages&#34;&gt;A note about &lt;code&gt;man&lt;/code&gt; pages.&lt;/h3&gt;
&lt;p&gt;Most, not all, commands in Linux have a MANual page that correlate to them. The help files for Linux are literally built into the system itself! To get to them, type in the command &lt;code&gt;man&lt;/code&gt;, followed by the command you want to view the man page for. In this case, let&amp;rsquo;s take a look a the man page for &lt;code&gt;ls&lt;/code&gt;. Type &lt;code&gt;man ls&lt;/code&gt; at your command line now. You can use either the arrow keys or the keyboard letters &lt;code&gt;j&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt;. The keyboard options are known as Vi controls, we&amp;rsquo;ll touch more on that in a later lesson.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at this page. Being able to read these pages is an important skill for us. Every page should begin with a &lt;strong&gt;NAME&lt;/strong&gt; area. This will tell you the command name, which is what you type at the command line, and usually a short line about what it does for you. After that &lt;strong&gt;SYNOPSIS&lt;/strong&gt; will give you an idea of how it is used. The &lt;code&gt;ls&lt;/code&gt; command can be followed by [OPTION] and [FILE]. The &lt;code&gt;...&lt;/code&gt; after each is to denote that more than one of either option can be defined. Anything marked as [OPTION] can usually be omitted.
Next is the &lt;strong&gt;DESCRIPTION&lt;/strong&gt; portion of the man page. This is where you first find a more detailed description of what the command does, as well as the options for the command. As you can tell, there are a lot of options that can be used with &lt;code&gt;ls&lt;/code&gt;! Let&amp;rsquo;s just focus on two very useful ones for now, &lt;code&gt;-a&lt;/code&gt; and &lt;code&gt;-l&lt;/code&gt;. Read up on those two, then press &lt;code&gt;q&lt;/code&gt; to exit the man page.&lt;/p&gt;
&lt;h3 id=&#34;back-to-our-regularly-scheduled-program&#34;&gt;Back to our regularly scheduled program&lt;/h3&gt;
&lt;p&gt;Now, back at the command line, we have a couple of things to clear up. Originally, I said &amp;ldquo;flags&amp;rdquo;, but the man pages call them &amp;ldquo;options&amp;rdquo;. This is the first instance of the time that you will see multiple names for the same thing in Linux. At least, if you don&amp;rsquo;t count the fact that a lot of people use the terms &amp;ldquo;folder&amp;rdquo; and &amp;ldquo;directory&amp;rdquo; interchangably. Hopefully, that doesn&amp;rsquo;t get too confusing, trust me, you get used to it.&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s put our findings to good use. At the command prompt, type in &lt;code&gt;ls -al&lt;/code&gt;. Yes, short code options can be strung together after a single dash (&lt;code&gt;-&lt;/code&gt;). That is why if you are using an option/flag that is a complete word, you must preceed it with double-dashes (&lt;code&gt;---&lt;/code&gt;). Anyway, type that in and press enter and you will notice a bit more informationpresented that we need to discuss!&lt;/p&gt;
&lt;p&gt;First, there are obviously more directories. And they are all listed in a single row. AND what is with all these columns?! This is actually a more advanced way of viewing the contents of the directory you are in. It includes all folders, including hidden directories, which are revealed by the &lt;code&gt;-a&lt;/code&gt; option. The columns are a result of the &lt;code&gt;-l&lt;/code&gt; option. The first column contains a string of letters and dashes that tell you the permissions for that folder. The &amp;rsquo;d&#39; at the beginning denote it is a directory, files have a preceeding dash. Next are three sets of &amp;lsquo;rwx&amp;rsquo;, where each letter may be replaced by a dash. These mean &amp;ldquo;read&amp;rdquo;, &amp;ldquo;write&amp;rdquo;, and &amp;ldquo;execute&amp;rdquo;, and are repeated three times for &amp;ldquo;User&amp;rdquo;, &amp;ldquo;Group&amp;rdquo;, and &amp;ldquo;Other&amp;rdquo;. We will get into what that all means in another lesson as well, for now, it isn&amp;rsquo;t important. This is followed by a number that says the number of links to that item (directory or file) exist on the entire file system.&lt;/p&gt;
&lt;p&gt;The next two columns at this point will likely have your user name in both columns. These tell you what group the file belongs to, and what user in that group created the file. Again, for now, not terribly important, and we will come back to this as we get deeper into Linux administration.&lt;/p&gt;
&lt;p&gt;The next set of numbers is the file size measured in bytes. There are more options available that will print this in more easily digestible numbers, but you may notice now that directories are all listed as being 4096 bytes, no matter how much is contained in the directory. This is because that is just the size of the identifier that is the directory name, not the size of the contents of the directory iteself.&lt;/p&gt;
&lt;p&gt;The final column before the directory name is the date and time the file or directory was last modified. Not terribly important for home use, but if you ever get a job as a cybersecurity role, this can actually be important digital forensics to note.&lt;/p&gt;
&lt;p&gt;Finally, the names of all directories, including hidden directories. You may notice that all of the directories that now appear that were not in the original listing begin with a &amp;lsquo;.&amp;rsquo;. Believe it or not, hiding a directory or file in Linux is as simple as starting it&amp;rsquo;s name with a &amp;lsquo;.&amp;rsquo;. You may be a bit confused at the first two directories, &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;..&lt;/code&gt;. MORE LINUX SHORTHAND, YAY!&lt;/p&gt;
&lt;p&gt;These are indeed, short names for two very specific directories. &lt;code&gt;.&lt;/code&gt; is simply the shorthand form of the current directory. To show this, let&amp;rsquo;s try something. The &lt;code&gt;ls&lt;/code&gt; command is not limited to only the directory we are currently in. If you type in a directory name after the options, you can list the contents of that directory. Let&amp;rsquo;s try it, type in &lt;code&gt;ls -al .&lt;/code&gt; with that &amp;lsquo;.&amp;rsquo; included at the end. As you can see, it repeats the same list. That is because &amp;lsquo;.&amp;rsquo; is shorthand for the directory itself. Every directory has a reference to itself built in, named &amp;lsquo;.&amp;rsquo;&lt;/p&gt;
&lt;p&gt;So what about the &amp;lsquo;..&amp;rsquo;? That is a shorthand to the directory directly above the directory you are in. If you remember, when we typed in &lt;code&gt;pwd&lt;/code&gt;, we got an answer of &lt;code&gt;/home/username&lt;/code&gt;. So &lt;code&gt;username&lt;/code&gt; is our current directory, and one level above that is &lt;code&gt;home&lt;/code&gt;. If we try &lt;code&gt;ls -al ..&lt;/code&gt;, you should get a response of &lt;code&gt;username&lt;/code&gt; along with &amp;lsquo;.&amp;rsquo; and &amp;lsquo;..&amp;rsquo;. There may be more, as well, if there are other users on your Linux machine. The thing to note here, is that I mentioned every directory in Linux automatically has a &amp;lsquo;.&amp;rsquo; file referring to itself. This is also true of &amp;lsquo;..&amp;rsquo;. At first, this may not make much sense, as it would seem that there couldn&amp;rsquo;t be a &amp;lsquo;..&amp;rsquo; file for this, as there is no level higher. For &lt;code&gt;/&lt;/code&gt;, the &amp;lsquo;..&amp;rsquo; shortcut simply refers back to &lt;code&gt;/&lt;/code&gt; just as &amp;lsquo;.&amp;rsquo; does. Don&amp;rsquo;t worry, that&amp;rsquo;s just trivia, you will never think about it again.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s talk briefly about one last command before we stop for the day, shall we?&lt;/p&gt;
&lt;h2 id=&#34;cd---now-we-are-going-places&#34;&gt;&amp;lsquo;cd&amp;rsquo; - Now we are going places!&lt;/h2&gt;
&lt;p&gt;Our next command is &lt;code&gt;cd&lt;/code&gt;. If you are a curious reader, you may notice that this command doesn&amp;rsquo;t have a man page. The only reason for that is that there are no options for this command. &lt;code&gt;cd&lt;/code&gt; is the &amp;ldquo;Change Directory&amp;rdquo; command. By typing in &lt;code&gt;cd&lt;/code&gt; followed by the name of a directory, you move your &lt;code&gt;pwd&lt;/code&gt; to that directory. This brings up an important point, though. How do you have to type in the name of the directory? We mentioned earlier that the &amp;ldquo;absolute&amp;rdquo; path to our home folder was &lt;code&gt;/home/username&lt;/code&gt;, to get to, say, the Docurments directory, do we have to type in &lt;code&gt;cd /home/username/Documents&lt;/code&gt;? Well, we could. That would absolutely work. However, &amp;ldquo;relative&amp;rdquo; pathing would be much simpler.&lt;/p&gt;
&lt;h3 id=&#34;more-about-relative-file-paths&#34;&gt;More about relative file paths&lt;/h3&gt;
&lt;p&gt;So, what is a relative file path? Simply, it is typing the name of a directory with the assumption that you are currently in the directory containing that as a subdirectory. The system will prepend &lt;code&gt;pwd&lt;/code&gt; to the path, and attempt to move there. So if you were to type in &lt;code&gt;cd Documents&lt;/code&gt; from your home directory, the system would see that as exactly the same as &lt;code&gt;cd /home/username/Documents&lt;/code&gt;. This makes typing a lot easier.&lt;/p&gt;
&lt;p&gt;If you ever do find yourself outside you home folder, or whatever other folder you thought you were in, Linux will print out a nice error message saying that the directory you are trying to move to doesn&amp;rsquo;t exist. You can use a mixture of &lt;code&gt;pwd&lt;/code&gt; and &lt;code&gt;ls&lt;/code&gt;, to orient yourself to correct your &lt;code&gt;cd&lt;/code&gt; command to get where you mean to be.&lt;/p&gt;
&lt;h3 id=&#34;whew-that-was-a-lot&#34;&gt;Whew! That was a Lot!&lt;/h3&gt;
&lt;p&gt;Well, not really. But it was enough to get started. Look around, see what you can find. Explore your file system a bit and see what is there, and try to think about why. Knowing how your system is laid out is a very important thing for someone looking to take control of that system. Stay curious!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Lesson Plan</title>
      <link>/posts/lesson-plan/</link>
      <pubDate>Sat, 11 Mar 2023 17:17:57 -0700</pubDate>
      
      <guid>/posts/lesson-plan/</guid>
      <description>Linux  Command Line Basics  pwd, cd, ls, and flags mkdir &amp;amp; rmdir, rm, touch man and &amp;ndash;help cp, mv, locate   Intermediate Command Line  echo, cat, and pipes editors (vi/m, nano) sudo, df, du tar, zip, unzip uname, chmod, ping   Terminal Text Manipulation  awk, sed, grep, sort, cut, uniq, fmt, tr, nl, wc   Processes  ps, top, htop, atop, lsof kill, killall   Performance  nmon, iostat, sar, vmstat   Network  traceroute, mtr, ping, nmap, netstat, ufw/firewalld, tcpdump, iptables/nftables, dig, scp   Special Note: POSIX Bash/shell scripting  OS Admin Concepts  initd systemd virtualization/containers memory/storage file systems  Programming Setup  Hugo and Quarto Git Languages  Python R Javascript/npm    Project One  Planning a project  </description>
      <content>&lt;h2 id=&#34;linux&#34;&gt;Linux&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Command Line Basics
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../lesson-1-command-line-starters&#34;&gt;pwd, cd, ls, and flags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../lesson-2-directories-and-files&#34;&gt;mkdir &amp;amp; rmdir, rm, touch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../lesson-1-command-line-starters&#34;&gt;man and &amp;ndash;help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;..lesson-2-directories-and-files&#34;&gt;cp, mv&lt;/a&gt;, locate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Intermediate Command Line
&lt;ul&gt;
&lt;li&gt;echo, cat, and pipes&lt;/li&gt;
&lt;li&gt;editors (vi/m, nano)&lt;/li&gt;
&lt;li&gt;sudo, df, du&lt;/li&gt;
&lt;li&gt;tar, zip, unzip&lt;/li&gt;
&lt;li&gt;uname, chmod, ping&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Terminal Text Manipulation
&lt;ul&gt;
&lt;li&gt;awk, sed, grep, sort, cut, uniq, fmt, tr, nl, wc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Processes
&lt;ul&gt;
&lt;li&gt;ps, top, htop, atop, lsof&lt;/li&gt;
&lt;li&gt;kill, killall&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Performance
&lt;ul&gt;
&lt;li&gt;nmon, iostat, sar, vmstat&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Network
&lt;ul&gt;
&lt;li&gt;traceroute, mtr, ping, nmap, netstat, ufw/firewalld, tcpdump, iptables/nftables, dig, scp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Special Note: POSIX&lt;/li&gt;
&lt;li&gt;Bash/shell scripting&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;os-admin-concepts&#34;&gt;OS Admin Concepts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;initd&lt;/li&gt;
&lt;li&gt;systemd&lt;/li&gt;
&lt;li&gt;virtualization/containers&lt;/li&gt;
&lt;li&gt;memory/storage&lt;/li&gt;
&lt;li&gt;file systems&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;programming&#34;&gt;Programming&lt;/h2&gt;
&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hugo and Quarto&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;Languages
&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;R&lt;/li&gt;
&lt;li&gt;Javascript/npm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;project-one&#34;&gt;Project One&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../lesson-3-project-planning-1&#34;&gt;Planning a project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Another Switch Up</title>
      <link>/posts/another-switch-up/</link>
      <pubDate>Sat, 11 Mar 2023 16:30:01 -0700</pubDate>
      
      <guid>/posts/another-switch-up/</guid>
      <description>Yeah, I know I know, less focus than a 1940s film projector. This time, though, I&amp;rsquo;m pretty sure I&amp;rsquo;ve got the direction I actually want to go. I enjoy teaching concepts and only enough specificity to get things done. Current plan is to create a learning path series that will carry a person from first steps with Linux all the way through to building a personal project that relies on a backbone that can be transferred to real-world applications and re-created to produce actual results.</description>
      <content>&lt;h3 id=&#34;yeah-i-know&#34;&gt;Yeah, I know&lt;/h3&gt;
&lt;p&gt;I know, less focus than a 1940s film projector. This time, though, I&amp;rsquo;m pretty sure I&amp;rsquo;ve got the direction I actually want to go. I enjoy teaching concepts and only enough specificity to get things done. Current plan is to create a learning path series that will carry a person from first steps with Linux all the way through to building a personal project that relies on a backbone that can be transferred to real-world applications and re-created to produce actual results.&lt;/p&gt;
&lt;p&gt;This began out of a conversation with a friend saying she wishes she could do the things I do. My response, probably a bit flippantly, was to say that she could. Anyone can. The things I do for work and fun with a computer are matters of skills, not &amp;ldquo;talent&amp;rdquo;. Of course, that led to a conversation, fueled by the excellent &lt;a href=&#34;https://roadmap.sh/devops&#34;&gt;DevOps Roadmap&lt;/a&gt;, about everything that I put together in order to do these things.&lt;/p&gt;
&lt;p&gt;It also made me realize, I look at that roadmap and think, &amp;ldquo;Yeah, that&amp;rsquo;s about right&amp;rdquo;. From the outside looking in, that roadmap is intimidating as hell. Eliciting thoughts of &amp;ldquo;How the hell do I learn all of that?&amp;rdquo; The short answer, though, is: You don&amp;rsquo;t!&lt;/p&gt;
&lt;p&gt;Within each section, there are solid topics to learn, but more importantly, there are concepts to grasp. In correlation with these concepts, there are tools at your disposal. So long as you can grasp the concepts, and understand the tools, you can work with them to build and do some things that are impressive. So that is what I&amp;rsquo;m going to break these things down to, concepts and tools.&lt;/p&gt;
&lt;p&gt;Just like real tools, knowing what they are used for, and understanding how they can apply are limiting knowledge. Actually putting the tools to use are where things get interesting, and actual learning begins. You can learn the intricacies of mitre saws, laser levels, nail sizes, joinery&amp;hellip; But until you actually try to put together a table, you aren&amp;rsquo;t a carpenter. So while we will begin with concepts, very quickly, we are going to move forward to projects.&lt;/p&gt;
&lt;p&gt;The projects I put forward are NOT to be followed. They are to be thought of as inspiration. To continue the carpentry comparison, think of it as someone watching an episode of The New Yankee Workshop (that&amp;rsquo;s still on, right?), and deciding they are going to build a chair that way. Their chair will be their own. You might still recognize it as an Adirondack, but it will not look the same. Some parts of construction, some design concepts in the aesthetic, and, frankly, the worksmanship of it will not match. That&amp;rsquo;s a good thing. Individualize the work. Make it your own, change what it looks like, how it works, even some underlying concepts. Take your time, do the project for you, just use the tools I give you. That&amp;rsquo;s how you learn to become a useful programmer.&lt;/p&gt;
&lt;p&gt;Next time, a roadmap of what is going to happen. Please note, that roadmap isn&amp;rsquo;t finished being drawn up. It may change, it may grow, it may shrink. During each time that the articles for each part are published, the roadmap will be updated to link to them. If you want to follow along, it may be a good idea to bookmark it.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Quick Update 2</title>
      <link>/posts/quick-update2/</link>
      <pubDate>Mon, 16 Jan 2023 17:45:29 -0700</pubDate>
      
      <guid>/posts/quick-update2/</guid>
      <description>A Forced Focus So, as I admitted a bit in my previous posts, I am currently unemployed. After looking into the situation that has put me in, as well as my skills, drives, and goals for myself, it has led to a bit of a refocus for the way this site is going to go, and what that means going forward. This comes after a lot of thought with a career counselor, resume reviews, and just what I do with my spare time to keep myself from going insane.</description>
      <content>&lt;h1 id=&#34;a-forced-focus&#34;&gt;A Forced Focus&lt;/h1&gt;
&lt;p&gt;So, as I admitted a bit in my previous posts, I am currently unemployed. After looking into the situation that has put me in, as well as my skills, drives, and goals for myself, it has led to a bit of a refocus for the way this site is going to go, and what that means going forward. This comes after a lot of thought with a career counselor, resume reviews, and just what I do with my spare time to keep myself from going insane. It also caused an evaluation of what I want and need from a job going forward in order to survive and thrive. As you can tell from these themes, it is going to get a bit personal. If that isn&amp;rsquo;t your cup of tea, I understand. Please also understand, I don&amp;rsquo;t publish this to lament my lot in life, but to show others that may be in a similar position by fate and happenstance, you are not alone. It is completely okay to reevaluate life, and decide what you want and need from it. Hopefully, my process helps those folks understand that this is not a bad thing, if you find yourself needing to, evaluate your life, and make it into something more tolerable.&lt;/p&gt;
&lt;p&gt;First of all, the circumstances I lost my previous job under have some people that I have spoken to about it calling it unfair. I disagree. Those circumstances were that I was under a 90 day probation period at the job. It was laid out to me before I took the job that there was a very strict policy on missed time during that period. If I missed three days, the job was terminated. While my circumstances for missing those days were medical (I had an IBS flare up that caused severe pain, a suspected obstruction), it doesn&amp;rsquo;t change the fact that the job I undertook was a physical one in the tech field, with presence required for the business model to work. They laid that out, and I accepted, knowing my own medical history and not foreclosing that information during the hiring process. If there is anyone to blame for the job being offered and then rescinded within two weeks, it is myself, not my former employer.&lt;/p&gt;
&lt;p&gt;That being said, it has caused me to reevaluate my life, both work and personal, when it comes to managing my illness. I have come to admit that it is, indeed, a handicap. It is not one that prevents me from working. It is just one that prevents me from leaving the house occasionally. In my job previous as a help desk analyst, I was working primarily from home. If need be, I was taking days off due to these issues when they got severe, but when it was about the same as what caused the missed days at my last job, more often than not, I would work. When need arose, I would get off the phones, and then I would return. Even on those days, despite the missed time, I was often a KPI leader in calls taken, and was seen as a bit of a leader on knowledge of the procedures and processes we were expected to follow. Lack of ability to be in office DOES NOT EQUATE to lack of ability to be a valuable team member.&lt;/p&gt;
&lt;p&gt;Because of that, I am going to be more up front with this disability, and admit it as such on applications. I am going to ask for flex accomodations to be able to work from home as needed to continue contributing to my work. However, I am going to limit the scope of jobs I look for in the tech field. As mentioned, the last job I had was physical. It involved running cables, installing hardware, and physically assuring system availability and operation when needed. That is not something I can reliably do. I realized that, and started, initially, looking to get back into web development, either front or back end, and slinging code. This is something I have done before. It is also something I quickly burned out on before. Not least of which because usually, the work is mainly front end that is usually desired. I have the artistic ability of a parapalegic newt, I am not the person you want implementing something that is supposed to look pretty or useful! Can I do the job? Yes. I have done it before. Same with back end, can I do it? Yes. In fact, knowledge of back end requirements, what is possible, and thinking outside the box to achieve unusual requests were one of the things that got me notied by a former co-worker that was apparently so appreciative of that skill that even six months after our last conversation, she is still giving me alerts to when new jobs come up that I can fit with where she now works. (If you see this, yet again, THANK YOU! I don&amp;rsquo;t care if you get tired of hearing that, I&amp;rsquo;ll keep saying it, because it really does mean that much.)&lt;/p&gt;
&lt;p&gt;Recently, though, trying to put together a portfolio for that end of things reminded me, I don&amp;rsquo;t really want to have to kludge together any more bad code to fix errant requests to make systems work in ways that they shouldn&amp;rsquo;t because there was no design put into the evolution of said systems that have now grown out of spec. And let&amp;rsquo;s face it, that is pretty much the definition of back-end work. So I was left with a conundrum. Where to take my talents and skills?&lt;/p&gt;
&lt;p&gt;I began looking into what I do just because I am bored. I like baseball, but I haven&amp;rsquo;t watched a game in years. To me, part of the allure of baseball is that you don&amp;rsquo;t have to be able to watch it to be able to appreciate it. A look at the box scores can tell you, if you know how to read them, everything that happened over the course of four hours on a patch of grass, hundreds of miles away from you, among twenty or so people. A glance at a standings sheet and roster report can give you a fair idea of what will happen tomorrow among a different grouping of the same size.&lt;/p&gt;
&lt;p&gt;When it comes to games, I love to play them. Video game preferences for me run away from war and shooting, and towards simulation and stratgey. In well made strategy games, either through game menus or observational play, you get to know what situation you are in, and can formulate a plan or new goal based on the resources available to you. For simulations, the same thing arise, whether that simulation be something like SimCity, or a bit more complex, like Dwarf Fortress. Even when the numbers are hidden from view, the systems can be figured out to a degree that allows interaction with a system in a meaningful way to create situations out of seeming chaos.&lt;/p&gt;
&lt;p&gt;That has led me to thinking, data and business analytics is simply using known data to react to chaotic systems such as economy, climate change, and the unexpected in the most meaningful way possible. Do I think it will have the same fun factor as playing Dwarf Fortress, or running a Monte Carlo simulation on a possible baseball outcome? No, I&amp;rsquo;m not stupid. Work is to complete tasks for others, and to make ends meet. Play is for the other stuff. But at least with this field, I know what I&amp;rsquo;m getting into, I cannot be sold a bill of goods on changing the world, or getting rich. I&amp;rsquo;m making information more visible to make decisions more apparent, and trying to remove any possible clouds from that judgement by relating facts that may be uncomfortable. That&amp;rsquo;s not fun, but that is life, and that is something I can accept.&lt;/p&gt;
&lt;p&gt;And it&amp;rsquo;s something I can do from an office, or from home. So it may just be the most perfect fit for what my life is now that I have taken a look at my life&amp;rsquo;s own data, without bias, and accepted, I&amp;rsquo;m a bit less capable than most. It doesn&amp;rsquo;t make me useless, it just makes me less of a physical presence. But I&amp;rsquo;ve already proven, I don&amp;rsquo;t have to be present to be an impact. And I&amp;rsquo;m going to make an impact.&lt;/p&gt;
&lt;p&gt;So, that was a lot of words, what does that mean for this site going forward? Well, for starters, while I&amp;rsquo;m not likely to do away completely with the HTML/CSS/JavaScript track, it isn&amp;rsquo;t going to be a priority. Honestly, I now the information, and know it well, but other than the JavaScript side, it just isn&amp;rsquo;t me. Those other parts are presentation, and I&amp;rsquo;m a newt, remember? I&amp;rsquo;m going to keep going with teaching, because I have quite a few transferable skills. Recently, I got involved in a study group for those breaking into data analysis and I am looking at the information on different aspects that cross over to my old jobs, and I can understand why people are frustrated thinking they can never get this. Do you really need an eight hour tutorial on database design where the first hour and a half is spent trying to clumsily define what data and a database are? Or, as a beginner, do you need just enough information to be able to take an already known-clean data set and shove it into a database in order to begin some analysis?&lt;/p&gt;
&lt;p&gt;Frankly, I think getting people up and running with the tools they need as fast as possible beats the hell out of that. You shouldn&amp;rsquo;t need to take in enough information to be an entry-level database admin in order to get up and running with entry-level data analysis. For goodness sake, if that were the case, the field is vastly underpaid! So I&amp;rsquo;m going to pivot a bit, and give a few tutorials on how to take a known clean dataset, how to evaluate that dataset in order to build the database it needs, and then import the damn thing. Then analyze it, and possibly use HTML/CSS/JavaScript to make a static page to publish a report. Then, if you are still interested, we&amp;rsquo;ll go above that and get some not so clean data, and work on the more advanced stuff. But not until we already have something to show for ourselves, dammit!&lt;/p&gt;
&lt;p&gt;Until then, thanks for bearing with me through all of that. I look forward to posting again, soon.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Tutorial 1 Getting Started With HTML</title>
      <link>/posts/tutorial-1-getting-started-with-html/</link>
      <pubDate>Fri, 06 Jan 2023 14:31:45 -0700</pubDate>
      
      <guid>/posts/tutorial-1-getting-started-with-html/</guid>
      <description>Let&amp;rsquo;s Go! So, here we go. The set up tutorial. If you remember the old blog about this, don&amp;rsquo;t panic. This is going to be a lot easier. Set up is streamlined a lot. In fact, we are going to get into talking about HTML in this tutorial, set up and first steps are all in one lesson now! Let&amp;rsquo;s f^&amp;amp;centkin&#39; do this!
Editor Set Up So, if you are interested in web development, I&amp;rsquo;m going to assume you have access to the internet in some fashion.</description>
      <content>&lt;h1 id=&#34;lets-go&#34;&gt;Let&amp;rsquo;s Go!&lt;/h1&gt;
&lt;p&gt;So, here we go. The set up tutorial. If you remember the old blog about this, don&amp;rsquo;t panic. This is going to be a lot easier. Set up is streamlined a lot. In fact, we are going to get into talking about HTML in this tutorial, set up and first steps are all in one lesson now! Let&amp;rsquo;s f^&amp;amp;centkin&#39; do this!&lt;/p&gt;
&lt;h1 id=&#34;editor-set-up&#34;&gt;Editor Set Up&lt;/h1&gt;
&lt;p&gt;So, if you are interested in web development, I&amp;rsquo;m going to assume you have access to the internet in some fashion. Thus, we are going to edit the code online. If you go to &lt;a href=&#34;https://www.codepen.io&#34;&gt;CodePen&lt;/a&gt;, you can sign up for free, and have at your fingertips editors with colored syntax highlighting for HTML, CSS, and JavaScript. This should open this set of instruction for everyone, whether you have a desktop, laptop, or even just your cell phone.&lt;/p&gt;
&lt;p&gt;Once you are signed up, and signed in, of course, just click on the menu and choose &amp;ldquo;New Pen&amp;rdquo;. There you go. You are set up. The editors are separated for HTML, CSS, and JavaScript, either in separate editors available on your screen, or through tabs, depending on the size of your screen. There you are. You&amp;rsquo;re all set up. Seriously, that&amp;rsquo;s it. Why are you still here? Move on to the next section.&lt;/p&gt;
&lt;h1 id=&#34;intro-to-html&#34;&gt;Intro to HTML&lt;/h1&gt;
&lt;p&gt;The most important thing with learning anything with computers, from HTML to C++ to a word processor, is to play. So for today, I&amp;rsquo;m not going to cover the syntax and usage of HTML. I&amp;rsquo;m simply going to introduce the documentation and how to navigate it. After you become familiar with how the documentation is laid out, read it and play a bit. Don&amp;rsquo;t worry about the CSS and JavaScript editors in CodePen for now. Just play around with the HTML and what it does when you put it on the screen.&lt;/p&gt;
&lt;p&gt;The best documentation on the internet for HTML syntax is the Mozilla Developer Network (MDN) documents. These can be found &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML&#34;&gt;here&lt;/a&gt;. It is honestly best if you bookmark this. This reference is invaluable. Another thing to keep in mind is that the Mozilla Foundation, the folks that maintain this reference, as well as make the Firefox web browser, is a non-profit. There is no sign up, and none of your data is tracked. Because of that, Mozilla is funded through donations. If you can, please &lt;a href=&#34;https://donate.mozilla.org/en-US/&#34;&gt;donate&lt;/a&gt; to Mozilla so they can keep up their great work.&lt;/p&gt;
&lt;p&gt;Just to come up to speed on the documentation, if you click on the menu on your phone&amp;rsquo;s screen at the top-left (or in the left sidebar on your computer screen), you will see a section at the top that says &lt;strong&gt;Tutorials&lt;/strong&gt;. Please read through at least the HTML Basics tutorial. It is best if you can read through the entirety of the four tutorials listed, but they are very lengthy and dense, so I understand if you don&amp;rsquo;t. Just remember that they are there and come back to them when you can.&lt;/p&gt;
&lt;p&gt;And don&amp;rsquo;t worry if it takes several read-throughs before you begin to understand what they are talking about. If you don&amp;rsquo;t get it, simply take notes on what is being said, plug it into CodePen, and then change it a bit to see how it affects the outcome, and finally re-read that part of the tutorial. We will go through some things in the next few weeks, but for the most part, these documents are well-written enough that I am going to trust that between reading and experimenting, you can figure it out.&lt;/p&gt;
&lt;p&gt;So, until next week&amp;rsquo;s tutorial, read through the docs, have CodePen open while you do, and experiment. Next time, we will go through some of the most frequently used tags in HTML and speak about what they do, and get to where we can get something resembling a web page up in front of us. The following week, we will cover some of the more advanced topics of attributes to tags and their effects, as well as building our first forms and tables.&lt;/p&gt;
&lt;p&gt;In week four, we move on to CSS. As you can see, this is &lt;em&gt;very&lt;/em&gt; fast paced. I am relying on you taking some part of the week between each post to get your hands dirty in CodePen and actually making a few shitty web pages. And yes, they are shitty. First web pages always are, especially when dealing with only HTML. Don&amp;rsquo;t fear this. We development is a creative endeavor akin to writing, and &lt;a href=&#34;https://wrd.as.uky.edu/sites/default/files/1-Shitty%20First%20Drafts.pdf&#34;&gt;shitty first drafts&lt;/a&gt; are invaluable in writing!&lt;/p&gt;
&lt;p&gt;Until next week, have fun, and keep learning!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Whats Next</title>
      <link>/posts/whats-next/</link>
      <pubDate>Thu, 05 Jan 2023 13:25:14 -0700</pubDate>
      
      <guid>/posts/whats-next/</guid>
      <description>What&amp;rsquo;s Next Here So just an update now that I&amp;rsquo;ve decided what to do with this site. This update is actually a day late from when it was supposed to go out.
That&amp;rsquo;s because on Wednesday&amp;rsquo;s I&amp;rsquo;m going to be adding updates on what I&amp;rsquo;m working on beside the tutorials, or launch a completed project. Fridays, I will be posting a tutorial akin to what was on the now defunct blog site.</description>
      <content>&lt;h1 id=&#34;whats-next-here&#34;&gt;What&amp;rsquo;s Next Here&lt;/h1&gt;
&lt;p&gt;So just an update now that I&amp;rsquo;ve decided what to do with this site. This update is actually a day late from when it was supposed to go out.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s because on Wednesday&amp;rsquo;s I&amp;rsquo;m going to be adding updates on what I&amp;rsquo;m working on beside the tutorials, or launch a completed project. Fridays, I will be posting a tutorial akin to what was on the now defunct blog site. It will be started all over from scratch, but with a more compact view of HTML and CSS, and with minimal set up! Following along this time will not require any installation on your computer, and can even be followed along with on your phone. The internet is amazing, ain&amp;rsquo;t it?&lt;/p&gt;
&lt;p&gt;So that&amp;rsquo;s it, just a short update. Check in tomorrow for the set up and a look into the first steps of HTML. Fair warning, because of the more compact view of HTML that will be taken, there will be more reading and work off of this blog.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>What to Expect</title>
      <link>/posts/what-to-expect/</link>
      <pubDate>Sun, 01 Jan 2023 17:09:56 -0700</pubDate>
      
      <guid>/posts/what-to-expect/</guid>
      <description>COMING SOON Within the coming weeks, this site will expand greatly beyond the current static blog you are reading now. This is, after all, my portfolio! It should show this, I think, if it is going to be effective in helping me get a job.
First thing that will be done, I am going to be uploading some JavaScript games. Simple games will be the first as I gain some further familiarity with using JavaScript to make games, but gaining in complexity quickly.</description>
      <content>&lt;h1 id=&#34;coming-soon&#34;&gt;COMING SOON&lt;/h1&gt;
&lt;p&gt;Within the coming weeks, this site will expand greatly beyond the current static blog you are reading now. This is, after all, my portfolio! It should show this, I think, if it is going to be effective in helping me get a job.&lt;/p&gt;
&lt;p&gt;First thing that will be done, I am going to be uploading some JavaScript games. Simple games will be the first as I gain some further familiarity with using JavaScript to make games, but gaining in complexity quickly. As I will be creating my own art assets, the games pages will be linking to the repositories with that art. Having no musical talent beyond karaoke (and then only in my own mind), the sound in the games will be properly credited below each game.&lt;/p&gt;
&lt;p&gt;Next, I will be putting up more posts as were previously seen on &lt;a href=&#34;https://www.blog.gudwitwurdz.click&#34;&gt;blog.gudwitwurdz.click&lt;/a&gt;. Starting with porting over those previous posts and then expanding them. If you were following that (who are you?), those posts will continue, stay tuned.&lt;/p&gt;
&lt;p&gt;Finally, this site is currently built with Hugo using the Terminal template. Credit is at the bottom of every page if you would like to contact the creator of the template. I will be looking into creating my own template and personalizing this template, as well.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
